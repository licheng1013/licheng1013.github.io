import{_ as o,o as p,c as i,b as n,d as s,a as e,e as t,r as c}from"./app.eae5ee61.js";const l="/images/img.png",r={},u=n("h1",{id:"electron",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#electron","aria-hidden":"true"},"#"),s(" Electron")],-1),d=n("h2",{id:"介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#介绍","aria-hidden":"true"},"#"),s(" 介绍💢")],-1),h=n("li",null,"桌面跨平台框架",-1),k={href:"https://www.electronjs.org/zh/docs/latest",target:"_blank",rel:"noopener noreferrer"},m=t('<h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装🍇</h2><ul><li>依赖 npm config set ELECTRON_MIRROR https://npmmirror.com/mirrors/electron/</li><li>创建vue+vite项目： ts + npm create electron-vite</li></ul><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题🍎</h2><ul><li>解决electron vue 项目中 Failed to fetch extension, trying 4 more times</li></ul><p><img src="'+l+'" alt="线程池"></p><ul><li>Ubuntu安装npm install 错误-执行以下命令</li><li>npm install --ignore-scripts</li></ul><h2 id="通信" tabindex="-1"><a class="header-anchor" href="#通信" aria-hidden="true">#</a> 通信🐸</h2>',7),v={href:"https://www.5axxw.com/questions/content/grs3s1",target:"_blank",rel:"noopener noreferrer"},_=n("li",null,"主进程的api不能直接来使用，需要通过ipcMain暴露出来",-1),b=n("li",null,"才能给暴露渲染进程的window的方法使用，如下面所例！",-1),g=t(`<h2 id="vue3-electron" tabindex="-1"><a class="header-anchor" href="#vue3-electron" aria-hidden="true">#</a> vue3 + Electron🏧</h2><h2 id="进程通信" tabindex="-1"><a class="header-anchor" href="#进程通信" aria-hidden="true">#</a> 进程通信💞</h2><h3 id="暴露给渲染进程的api" tabindex="-1"><a class="header-anchor" href="#暴露给渲染进程的api" aria-hidden="true">#</a> 暴露给渲染进程的API🍎</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span>contextBridge<span class="token punctuation">,</span> ipcRenderer<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;docs/try/electron&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//暴露给浏览器进行调用</span>
contextBridge<span class="token punctuation">.</span><span class="token function">exposeInMainWorld</span><span class="token punctuation">(</span><span class="token string">&#39;myAPI&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">openFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ipcRenderer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;openFile&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="主进程定义的通道" tabindex="-1"><a class="header-anchor" href="#主进程定义的通道" aria-hidden="true">#</a> 主进程定义的通道👏</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> app<span class="token punctuation">,</span>ipcMain<span class="token punctuation">,</span>dialog <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//whenReady初始化完成调用改方法</span>
app<span class="token punctuation">.</span><span class="token function">whenReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//创建窗口</span>
    <span class="token function">showNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//通知</span>
    ipcMain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;openFile&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">//定义进程通知</span>
        dialog<span class="token punctuation">.</span><span class="token function">showOpenDialog</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">&quot;选择部署文件包&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">properties</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;openFile&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API🍒</h3><div class="custom-container tip"><p class="custom-container-title">提示</p><p>无特殊说明用法同上面</p></div><ul><li>发送的例子-无法获取结果</li><li>ipcRenderer.send -&gt; ipcMain.on</li><li>发送并获取结果</li><li>ipcRenderer.invoke -&gt; ipcMain.handle</li></ul><h2 id="打包" tabindex="-1"><a class="header-anchor" href="#打包" aria-hidden="true">#</a> 打包🍉</h2>`,10),f=n("li",null,"deepin",-1),x={href:"https://bbs.deepin.org/zh/post/209813",target:"_blank",rel:"noopener noreferrer"},w=n("li",null,"snapd_2.49",-1),y=n("li",null,"libseccomp2_2.5.1",-1),R=n("li",null,"放在本目录下",-1),j=n("h2",{id:"项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#项目","aria-hidden":"true"},"#"),s(" 项目👏")],-1);function E(I,M){const a=c("ExternalLinkIcon");return p(),i("div",null,[u,d,n("ul",null,[h,n("li",null,[n("a",k,[s("https://www.electronjs.org/zh/docs/latest"),e(a)])])]),m,n("ul",null,[n("li",null,[s("教程来源："),n("a",v,[s("https://www.5axxw.com/questions/content/grs3s1"),e(a)])]),_,b]),g,n("ul",null,[f,n("li",null,[n("a",x,[s("https://bbs.deepin.org/zh/post/209813"),e(a)])]),w,y,R]),j])}const N=o(r,[["render",E],["__file","electron.html.vue"]]);export{N as default};
