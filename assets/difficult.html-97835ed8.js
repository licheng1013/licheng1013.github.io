const n=JSON.parse('{"key":"v-50eda543","path":"/study/go/difficult.html","title":"高级","lang":"zh-CN","frontmatter":{"description":"高级 介绍 23/2/28 理解go某些高级操作。 Select select 用于在多线程计算数据 下面示例附带了超时机制,但没有default语句. 当存在default语句，如果渠道还未存在数据,则直接执行default语句 package main import ( \\t\\"fmt\\" \\t\\"time\\" ) func main() { \\tc1 := make(chan string) \\tc2 := make(chan string) \\tgo func() { \\t\\ttime.Sleep(2 * time.Second) \\t\\tc1 &lt;- \\"one\\" \\t}() \\tgo func() { \\t\\ttime.Sleep(3 * time.Second) \\t\\tc2 &lt;- \\"two\\" \\t}() \\tfor i := 0; i &lt; 2; i++ { \\t\\tselect { \\t\\tcase msg1 := &lt;-c1: \\t\\t\\tfmt.Println(\\"received\\", msg1) \\t\\tcase msg2 := &lt;-c2: \\t\\t\\tfmt.Println(\\"received\\", msg2) \\t\\tcase &lt;-time.After(4 * time.Second): \\t\\t\\tfmt.Println(\\"timeout\\") //超时 \\t\\t\\treturn \\t\\t} \\t} \\t// 输出 \\t// received one \\t// received two }","head":[["meta",{"property":"og:url","content":"https://licheng1013.github.io/study/go/difficult.html"}],["meta",{"property":"og:site_name","content":"LiCheng Blog"}],["meta",{"property":"og:title","content":"高级"}],["meta",{"property":"og:description","content":"高级 介绍 23/2/28 理解go某些高级操作。 Select select 用于在多线程计算数据 下面示例附带了超时机制,但没有default语句. 当存在default语句，如果渠道还未存在数据,则直接执行default语句 package main import ( \\t\\"fmt\\" \\t\\"time\\" ) func main() { \\tc1 := make(chan string) \\tc2 := make(chan string) \\tgo func() { \\t\\ttime.Sleep(2 * time.Second) \\t\\tc1 &lt;- \\"one\\" \\t}() \\tgo func() { \\t\\ttime.Sleep(3 * time.Second) \\t\\tc2 &lt;- \\"two\\" \\t}() \\tfor i := 0; i &lt; 2; i++ { \\t\\tselect { \\t\\tcase msg1 := &lt;-c1: \\t\\t\\tfmt.Println(\\"received\\", msg1) \\t\\tcase msg2 := &lt;-c2: \\t\\t\\tfmt.Println(\\"received\\", msg2) \\t\\tcase &lt;-time.After(4 * time.Second): \\t\\t\\tfmt.Println(\\"timeout\\") //超时 \\t\\t\\treturn \\t\\t} \\t} \\t// 输出 \\t// received one \\t// received two }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-28T08:15:34.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-28T08:15:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"高级\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-28T08:15:34.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"Select","slug":"select","link":"#select","children":[{"level":3,"title":"使用注意","slug":"使用注意","link":"#使用注意","children":[]}]}],"git":{"createdTime":1677571455000,"updatedTime":1677572134000,"contributors":[{"name":"licheng1013","email":"2501093733@qq.com","commits":2}]},"readingTime":{"minutes":0.84,"words":251},"filePathRelative":"study/go/difficult.md","localizedDate":"2023年2月28日","excerpt":"<h1> 高级</h1>\\n<h2> 介绍</h2>\\n<ul>\\n<li>23/2/28</li>\\n<li>理解go某些高级操作。</li>\\n</ul>\\n<h2> Select</h2>\\n<ul>\\n<li>select 用于在多线程计算数据</li>\\n<li>下面示例附带了超时机制,但没有default语句.</li>\\n<li>当存在default语句，如果渠道还未存在数据,则直接执行default语句</li>\\n</ul>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">package</span> main\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">(</span>\\n\\t<span class=\\"token string\\">\\"fmt\\"</span>\\n\\t<span class=\\"token string\\">\\"time\\"</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\tc1 <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">make</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">chan</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span>\\n\\tc2 <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">make</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">chan</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span>\\n\\n\\t<span class=\\"token keyword\\">go</span> <span class=\\"token keyword\\">func</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\ttime<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Sleep</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span> <span class=\\"token operator\\">*</span> time<span class=\\"token punctuation\\">.</span>Second<span class=\\"token punctuation\\">)</span>\\n\\t\\tc1 <span class=\\"token operator\\">&lt;-</span> <span class=\\"token string\\">\\"one\\"</span>\\n\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n\\t<span class=\\"token keyword\\">go</span> <span class=\\"token keyword\\">func</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\ttime<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Sleep</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span> <span class=\\"token operator\\">*</span> time<span class=\\"token punctuation\\">.</span>Second<span class=\\"token punctuation\\">)</span>\\n\\t\\tc2 <span class=\\"token operator\\">&lt;-</span> <span class=\\"token string\\">\\"two\\"</span>\\n\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n\\t<span class=\\"token keyword\\">for</span> i <span class=\\"token operator\\">:=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">select</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">case</span> msg1 <span class=\\"token operator\\">:=</span> <span class=\\"token operator\\">&lt;-</span>c1<span class=\\"token punctuation\\">:</span>\\n\\t\\t\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"received\\"</span><span class=\\"token punctuation\\">,</span> msg1<span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token keyword\\">case</span> msg2 <span class=\\"token operator\\">:=</span> <span class=\\"token operator\\">&lt;-</span>c2<span class=\\"token punctuation\\">:</span>\\n\\t\\t\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"received\\"</span><span class=\\"token punctuation\\">,</span> msg2<span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token keyword\\">case</span> <span class=\\"token operator\\">&lt;-</span>time<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">After</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">4</span> <span class=\\"token operator\\">*</span> time<span class=\\"token punctuation\\">.</span>Second<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n\\t\\t\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"timeout\\"</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//超时</span>\\n\\t\\t\\t<span class=\\"token keyword\\">return</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token comment\\">// 输出</span>\\n\\t<span class=\\"token comment\\">// received one</span>\\n\\t<span class=\\"token comment\\">// received two</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
