import{_ as l,o as i,c as r,b as a,e,a as n,d as t,r as d}from"./app.8abb1cfc.js";const c={},o=t(`<h1 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> Mysql</h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍💢</h2><ul><li>2019</li><li>mysql 采用c或c++写的</li></ul><h2 id="mysql基本优化" tabindex="-1"><a class="header-anchor" href="#mysql基本优化" aria-hidden="true">#</a> Mysql基本优化🏩</h2><ul><li>禁止使用 select *</li><li>只需要一条数据则 limit</li><li>购买高性能云盘</li></ul><h2 id="索引" tabindex="-1"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引🌈</h2><ul><li>索引是否生效</li><li>explain</li><li>索引失效场景</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 不等             where xx != 1</span>
<span class="token comment"># 左%模糊查询      where xx like &quot;%xx&quot;</span>
<span class="token comment"># 计算失效        where xx = n+1</span>
<span class="token comment"># 使用函数       where xx(1,3) = 1</span>
<span class="token comment"># 字符串使用数字查询 where xx = 111  注:如果 xx 为字符串字段那么此时是不走索引的</span>
<span class="token comment"># or查询        where xx = 1 or nn = 2 注:如果只有一个字段建立索引那么是不会走索引，需要两个字段都建立</span>
<span class="token comment"># not in       where xx not in (11,22,33) 注:普通字段会失效，但主键字段不会失效</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="索引类型" tabindex="-1"><a class="header-anchor" href="#索引类型" aria-hidden="true">#</a> 索引类型🍉</h2><ul><li>主键索引</li><li>普通索引</li><li>唯一索引</li><li>全文索引</li><li>空间索引</li><li>优点增加了查询速度，但减少了增删改速度，因为需要操作一下索引文件</li></ul><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务👻</h2><h3 id="特性acid" tabindex="-1"><a class="header-anchor" href="#特性acid" aria-hidden="true">#</a> 特性ACID⭐</h3><ul><li>原子性，要么都成功要么都失效</li><li>隔离性(隔离级别)</li><li>一致性，结果要与预期的一致</li><li>持久性，应该保存到磁盘中，才算完成整个事务</li></ul><h3 id="隔离级别" tabindex="-1"><a class="header-anchor" href="#隔离级别" aria-hidden="true">#</a> 隔离级别🏧</h3><ul><li>读未提交(脏读)，事务B能读到事务A未提交的数据,(会读出A事务已经修改的后的数据，未提交事务之前的数据)</li><li><ul><li>影响：数据修改: 源a = 10,A事务 a = 10+10 回滚,B事务a = 20(脏数据)+10已提交。最终的数据=30,</li></ul></li><li><ul><li>总结：一个事务内的修改数据，会影响到其他事务的判断，对修改(加锁)</li></ul></li><li>读已提交(不可重复读)，</li><li><ul><li>影响：数据修改：源a = 10,事务A读取 10，事务B读取 10，事务A修改 10+10，在读取等于20，事务B读取还是10,</li></ul></li><li><ul><li>总结：一个事务内修改数据后，修改前后读取的数据不一致，此情况在一般不会发生。</li></ul></li><li>可重复读(有幻读问题)(默认):</li><li><ul><li>影响：主键源a B事务查询a发现没有准备插入但未提交事务，A事务已经插入a唯一数据并提交事务，B事务开始提交，然后发现了冲突，很迷惑。</li></ul></li><li><ul><li>总结：一个事务多次查询数据的结果是一样的，如果另一个事务执行了插入，那么可能造成了幻读</li></ul></li><li>串行化(以上问题都解决，效率低下)，不能并发执行,事务只能一个个执行，效率低下。</li></ul><h2 id="锁" tabindex="-1"><a class="header-anchor" href="#锁" aria-hidden="true">#</a> 锁🍑</h2><h3 id="乐观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁" aria-hidden="true">#</a> 乐观锁👻</h3><ul><li>基于业务实现，在数据库定义一个版本号进行实现。如果数据在其他地方已被修改，则异常。</li><li>适用快速返回结果的场景，读取频繁的场景</li></ul><h3 id="自旋锁-乐观锁递归" tabindex="-1"><a class="header-anchor" href="#自旋锁-乐观锁递归" aria-hidden="true">#</a> 自旋锁(乐观锁递归)🍋</h3><ul><li>基于乐观锁循环执行业务，直至业务执行完成。</li><li>适用能够等待的业务场景，读取频繁的场景</li></ul><h2 id="备份" tabindex="-1"><a class="header-anchor" href="#备份" aria-hidden="true">#</a> 备份🍉</h2><div class="custom-container tip"><p class="custom-container-title">提示</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#语法 mysqldump -u用户名 -p 数据库名 &gt; 数据库名.sql</span>
<span class="token comment"># 示例</span>
mysqldump <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-proot</span> shiping <span class="token operator">&gt;</span> shipin.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="定时备份命令" tabindex="-1"><a class="header-anchor" href="#定时备份命令" aria-hidden="true">#</a> 定时备份命令🪲</h3><ul><li>安装mysql连接器</li><li>yum install -y mariadb.x86_64 mariadb-libs.x86_64</li><li>每日两点备份一次</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 定时命令</span>
<span class="token function">crontab</span> <span class="token parameter variable">-e</span> 
<span class="token number">0</span> <span class="token number">2</span> * * * <span class="token function">bash</span> <span class="token variable">\${你的脚本目录}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="备份脚本" tabindex="-1"><a class="header-anchor" href="#备份脚本" aria-hidden="true">#</a> 备份脚本😎</h3><ul><li>vim backup.sh</li><li><strong>如果是docker必须指定-h参数，否则会有问题</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">dbName</span><span class="token operator">=</span><span class="token string">&quot;ink&quot;</span> <span class="token comment">#日期</span>
<span class="token assign-left variable">createTime</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">date</span> +%Y-%m-%d_%H-%M-%S<span class="token variable">\`</span></span>
<span class="token assign-left variable">filePath</span><span class="token operator">=</span><span class="token string">&quot;./sql/&quot;</span> <span class="token comment">#保存路径</span>
mysqldump <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-proot</span> <span class="token parameter variable">-h127.0.0.1</span> <span class="token variable">$dbName</span><span class="token operator">&gt;</span> <span class="token string">&quot;<span class="token variable">$filePath</span><span class="token variable">$dbName</span>-<span class="token variable">$createTime</span>&quot;</span>.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker🍊</h2>`,29),h={href:"http://licheng1013.gitee.io/blog-doc/linux/docker.html#mysql",target:"_blank",rel:"noopener noreferrer"},p=a("h2",{id:"读写分离",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#读写分离","aria-hidden":"true"},"#"),e(" 读写分离👏")],-1),u=a("li",null,"第三方博客教程",-1),m={href:"http://www.r9it.com/20190727/mysql-master-slave-in-docker.html",target:"_blank",rel:"noopener noreferrer"};function b(v,k){const s=d("ExternalLinkIcon");return i(),r("div",null,[o,a("ul",null,[a("li",null,[a("a",h,[e("http://licheng1013.gitee.io/blog-doc/linux/docker.html#mysql"),n(s)])])]),p,a("ul",null,[u,a("li",null,[a("a",m,[e("http://www.r9it.com/20190727/mysql-master-slave-in-docker.html"),n(s)])])])])}const g=l(c,[["render",b],["__file","mysql.html.vue"]]);export{g as default};
