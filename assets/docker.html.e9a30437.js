import{_ as l,o,c as i,a as n,e as s,b as e,d as t,r as c}from"./app.3e5792b2.js";const p={},r=t(`<h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍🐸</h2><ul><li>2019</li><li>一种容器化技术,更快更方便的部署</li></ul><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装✋</h2><ul><li><p>ubuntu20: snap install docker</p></li><li><p>docker</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://get.docker.com <span class="token operator">|</span> <span class="token function">bash</span> <span class="token parameter variable">-s</span> <span class="token function">docker</span> <span class="token parameter variable">--mirror</span> Aliyun
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>docker-compose</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#可能需要切换到root用户下执行, v2.6.1 这个得去github找最新版</span>
<span class="token function">curl</span> <span class="token parameter variable">-L</span> https://get.daocloud.io/docker/compose/releases/download/v2.6.1/docker-compose-<span class="token variable"><span class="token variable">\`</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">\`</span></span>-<span class="token variable"><span class="token variable">\`</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">\`</span></span> <span class="token operator">&gt;</span> /usr/local/bin/docker-compose
<span class="token function">chmod</span> +x /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>备注:有的系统需要手动启动</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start docker.service
systemctl <span class="token builtin class-name">enable</span> docker.service
systemctl daemon-reload <span class="token comment">#重启</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>手动配置镜像源</li><li>vim /etc/docker/daemon.json</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;https://almtd3fa.mirror.aliyuncs.com&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令✋</h2><ul><li>docker</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> nest_mongo <span class="token function">sh</span> mongo.sh <span class="token comment">#执行容器内的脚本</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> nest_mongo /bin/bash <span class="token comment">#进入容器</span>

<span class="token function">docker</span> save nginx-device:v1 <span class="token operator">&gt;</span> nginx.tar.gz <span class="token comment">#docker导出</span>
<span class="token function">docker</span> load <span class="token parameter variable">-i</span> nginx.tar.gz <span class="token comment">#docker导入(-i带标签和版本)</span>
<span class="token function">docker</span> build <span class="token parameter variable">-t</span> nest-sheet:v1 <span class="token comment">#docker构建(.必需)</span>

<span class="token function">docker</span> <span class="token function">ps</span> <span class="token comment">#查看容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token comment">#删除没有运行的容器,-f参数，删除正在运行的容器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>docker-compose</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>     <span class="token comment">#运行</span>
<span class="token function">docker-compose</span> down      <span class="token comment">#停止删除</span>
<span class="token function">docker-compose</span> start     <span class="token comment">#启动容器</span>
<span class="token function">docker-compose</span> stop      <span class="token comment">#停止</span>
<span class="token function">docker-compose</span> restart   <span class="token comment">#重启</span>
<span class="token function">docker-compose</span> logs <span class="token parameter variable">-f</span>   <span class="token comment">#查看日志</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>清理</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#删除所有的none镜像</span>
<span class="token function">docker</span> images  <span class="token operator">|</span> <span class="token function">grep</span> none <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $3}&#39;</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">docker</span> rmi
<span class="token comment">#删除没有使用的镜像</span>
<span class="token function">docker</span> image prune <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置镜像源" tabindex="-1"><a class="header-anchor" href="#配置镜像源" aria-hidden="true">#</a> 配置镜像源💢</h3><ul><li>在/etc/docker目录下创建daemon.json文件,阿里云</li><li>创建文件: vim /etc/docker/daemon.json</li><li>配置内容</li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>{ &quot;registry-mirrors&quot;: [&quot;https://almtd3fa.mirror.aliyuncs.com&quot;] }</p></div><h2 id="运行镜像" tabindex="-1"><a class="header-anchor" href="#运行镜像" aria-hidden="true">#</a> 运行镜像🗾</h2><h3 id="mongodb" tabindex="-1"><a class="header-anchor" href="#mongodb" aria-hidden="true">#</a> Mongodb🍋</h3>`,24),d={href:"https://hub.docker.com/_/mongo?tab=description",target:"_blank",rel:"noopener noreferrer"},u=n("li",null,"docker run -d -p 27017:27017 --name mongodb-dev mongo:5.0.10",-1),m=n("li",null,"配置账号密码",-1),k=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>use admin
db.createUser<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;user&#39;</span><span class="token builtin class-name">:</span><span class="token string">&#39;root&#39;</span>,<span class="token string">&#39;pwd&#39;</span><span class="token builtin class-name">:</span><span class="token string">&#39;123456&#39;</span>,<span class="token string">&#39;roles&#39;</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span>role:<span class="token string">&#39;root&#39;</span>,db:<span class="token string">&#39;admin&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> Mysql🏩</h3><ul><li>docker run -d -p 3306:3306 --name mysql-dev -e MYSQL_ROOT_PASSWORD=root mysql:5.7</li><li>docker run -d -p 3306:3306 --name mysql-dev -e MYSQL_ROOT_PASSWORD=root mysql:8.0.29</li><li>docker-compose</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.7&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">mysql-dev</span><span class="token punctuation">:</span>         <span class="token comment">#服务名</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always <span class="token comment">#跟随docker启动</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>8.0.29   <span class="token comment">#拉取镜像</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>dev <span class="token comment">#容器名</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>          <span class="token comment">#端口映射 本地:容器</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;3306:3306&quot;</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=root <span class="token comment">#密码</span>
      <span class="token punctuation">-</span> TZ=Asia/Shanghai         <span class="token comment">#时区</span>
    <span class="token comment">#volumes: </span>
    <span class="token comment">#  - /data/mysql/data:/var/lib/mysql # 映射数据卷</span>
    <span class="token comment">#  - ./sql:/sql #备份sql保存目录</span>
    <span class="token comment">#  - ./backup.sh:backup.sh #备份脚本 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>开启远程访问</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql-dev  <span class="token function">bash</span>
mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-proot</span>

<span class="token comment">#mysql8执行</span>
GRANT ALL ON *.* TO <span class="token string">&#39;root&#39;</span>@<span class="token string">&#39;%&#39;</span><span class="token punctuation">;</span>
<span class="token comment">#一个比较通用的解决方法</span>

USE mysql<span class="token punctuation">;</span>
update user <span class="token builtin class-name">set</span> <span class="token assign-left variable">Host</span><span class="token operator">=</span><span class="token string">&quot;%&quot;</span> where <span class="token assign-left variable">User</span><span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> User,authentication_string,Host from user<span class="token punctuation">;</span>
flush privileges<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>基本脚本导入sql</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">-uroot</span> -p<span class="token variable">$password</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF
CREATE DATABASE nest_common_dev;
USE nest_common_dev;
source /root/sql/nest_struct.sql;
source /root/sql/init.sql;
USE mysql;
update user set Host=&quot;%&quot; where User=&quot;root&quot;;
select User,authentication_string,Host from user;
flush privileges;
EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> Redis🍏</h3>`,9),v={href:"https://hub.docker.com/_/redis",target:"_blank",rel:"noopener noreferrer"},b=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-dev <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 redis:7.0.2 <span class="token parameter variable">--requirepass</span> <span class="token string">&quot;root&quot;</span> <span class="token comment">#选择版本运行 redis:5.0.6,--requirepass设置密码</span>
                                                
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> redis-dev  /bin/bash    <span class="token comment">#进入redis的shell</span>
redis-cli                               <span class="token comment">#进入redis    </span>
命令     AUTH root                       <span class="token comment">#登入</span>
        get  key                        <span class="token comment">#获取</span>
        <span class="token builtin class-name">set</span>  key value                  <span class="token comment">#set</span>
        keys *                          <span class="token comment">#查看所有</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="postgressql" tabindex="-1"><a class="header-anchor" href="#postgressql" aria-hidden="true">#</a> PostgresSql😃</h3><ul><li>root账号名: postgres</li><li>docker run --name postgres-dev -p 5432:5432 -e POSTGRES_PASSWORD=root -d postgres:15.0</li></ul><h3 id="rabbitmq" tabindex="-1"><a class="header-anchor" href="#rabbitmq" aria-hidden="true">#</a> Rabbitmq🏧</h3><ul><li>docker run -d --name rabbitmq-dev -p 15672:15672 -p 5672:5672 rabbitmq:management</li></ul><h3 id="rocketmq" tabindex="-1"><a class="header-anchor" href="#rocketmq" aria-hidden="true">#</a> RocketMq🍒</h3><ul><li>暂不需要</li></ul><h3 id="nacos" tabindex="-1"><a class="header-anchor" href="#nacos" aria-hidden="true">#</a> Nacos🐔</h3>`,8),h=n("li",null,"mysql8+nacos2.x",-1),g={href:"https://gitee.com/licheng1013/nacos-docker",target:"_blank",rel:"noopener noreferrer"},f=n("h3",{id:"seata",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#seata","aria-hidden":"true"},"#"),s(" Seata❤️")],-1),y=n("li",null,"docker示例",-1),q={href:"https://gitee.com/licheng1013/seata-docker",target:"_blank",rel:"noopener noreferrer"},_=t(`<h3 id="ubuntu" tabindex="-1"><a class="header-anchor" href="#ubuntu" aria-hidden="true">#</a> Ubuntu⭐</h3><ul><li>docker pull ubuntu:22.04</li></ul><h2 id="python" tabindex="-1"><a class="header-anchor" href="#python" aria-hidden="true">#</a> Python🌈</h2><ul><li>docker pull python:3.9.13</li></ul><h2 id="drawio" tabindex="-1"><a class="header-anchor" href="#drawio" aria-hidden="true">#</a> DrawIo🐔</h2><ul><li>流程图</li><li>docker run -it --rm --name=&quot;draw-dev&quot; -p 8080:8080 -p 8443:8443 jgraph/drawio</li><li>http://localhost:8080/?offline=1&amp;https=0</li></ul><h2 id="go部署" tabindex="-1"><a class="header-anchor" href="#go部署" aria-hidden="true">#</a> Go部署😎</h2><ul><li>镜像</li><li>docker pull golang:1.19.0</li></ul><h3 id="docker-compose部署" tabindex="-1"><a class="header-anchor" href="#docker-compose部署" aria-hidden="true">#</a> docker-compose部署🌅</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.7&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">go-dev</span><span class="token punctuation">:</span>         <span class="token comment">#容器名</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always <span class="token comment">#跟随docker启动</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">:</span><span class="token number">22.04</span>   <span class="token comment">#拉取镜像</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> go<span class="token punctuation">-</span>dev <span class="token comment">#容器名</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>          <span class="token comment">#端口映射 本地:容器</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;8999:8999&quot;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>        <span class="token comment">#数据映射必须绝对路径 本地:容器</span>
      <span class="token punctuation">-</span> ./main<span class="token punctuation">:</span>/main <span class="token comment">#示例目录必须存在</span>
      <span class="token punctuation">-</span> ./application.yml<span class="token punctuation">:</span>/application.yml <span class="token comment">#外部配置文件</span>
      <span class="token punctuation">-</span> /etc/localtime<span class="token punctuation">:</span>/etc/localtime
      <span class="token punctuation">-</span> /etc/timezone<span class="token punctuation">:</span>/etc/timezone
    <span class="token key atrule">entrypoint</span><span class="token punctuation">:</span> ./main <span class="token comment">#启动参数覆盖</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="java部署" tabindex="-1"><a class="header-anchor" href="#java部署" aria-hidden="true">#</a> Java部署🍋</h2><h3 id="docker-compose部署-1" tabindex="-1"><a class="header-anchor" href="#docker-compose部署-1" aria-hidden="true">#</a> docker-compose部署🍒</h3>`,12),x=n("li",null,"示例仓库",-1),S={href:"https://gitee.com/licheng1013/docker-compose-java",target:"_blank",rel:"noopener noreferrer"},j=t(`<div class="custom-container tip"><p class="custom-container-title">提示</p><p>主要配置文件</p></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.7&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">java-dev</span><span class="token punctuation">:</span>         <span class="token comment">#容器名</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always <span class="token comment">#跟随docker启动</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> openjdk<span class="token punctuation">:</span>17.0<span class="token punctuation">-</span>oracle   <span class="token comment">#拉取镜像</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> java<span class="token punctuation">-</span>dev <span class="token comment">#容器名</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>          <span class="token comment">#端口映射 本地:容器</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;9999:9999&quot;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>        <span class="token comment">#数据映射必须绝对路径 本地:容器</span>
      <span class="token punctuation">-</span> /etc/localtime<span class="token punctuation">:</span>/etc/localtime
      <span class="token punctuation">-</span> /etc/timezone<span class="token punctuation">:</span>/etc/timezone
      <span class="token punctuation">-</span> ./app<span class="token punctuation">:</span>/app
    <span class="token comment">#  - ./file:/file </span>
    <span class="token key atrule">entrypoint</span><span class="token punctuation">:</span> sh <span class="token punctuation">-</span>c &quot;cd app <span class="token important">&amp;&amp;</span>  java <span class="token punctuation">-</span>server <span class="token punctuation">-</span>Xms128m <span class="token punctuation">-</span>Xmx128m <span class="token punctuation">-</span>jar app.jar&quot; <span class="token comment"># app.jar是你在当前app目录下的jar包名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function w(O,A){const a=c("ExternalLinkIcon");return o(),i("div",null,[r,n("ul",null,[n("li",null,[n("a",d,[s("https://hub.docker.com/_/mongo?tab=description"),e(a)])]),u,m]),k,n("ul",null,[n("li",null,[s("docker-hub: "),n("a",v,[s("https://hub.docker.com/_/redis"),e(a)])])]),b,n("ul",null,[h,n("li",null,[n("a",g,[s("https://gitee.com/licheng1013/nacos-docker"),e(a)])])]),f,n("ul",null,[y,n("li",null,[n("a",q,[s("https://gitee.com/licheng1013/seata-docker"),e(a)])])]),_,n("ul",null,[x,n("li",null,[n("a",S,[s("https://gitee.com/licheng1013/docker-compose-java"),e(a)])])]),j])}const E=l(p,[["render",w],["__file","docker.html.vue"]]);export{E as default};
