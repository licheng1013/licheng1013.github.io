import{_ as p,Q as c,S as o,Z as n,a2 as s,$ as t,a1 as e,F as l}from"./framework-ec23596d.js";const i="/images/LuBan.png",u={},k=e(`<h1 id="unity" tabindex="-1"><a class="header-anchor" href="#unity" aria-hidden="true">#</a> Unity</h1><h2 id="unity基础" tabindex="-1"><a class="header-anchor" href="#unity基础" aria-hidden="true">#</a> Unity基础🪲</h2><h3 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包🎈</h3><div class="hint-container tip"><p class="hint-container-title">闭包</p><ul><li>吐槽网上一堆垃圾教程没有一个解释好的，还不如编辑器提示的闭包类好</li></ul></div><ul><li>无参和有参闭包</li></ul><div class="language-c# line-numbers-mode" data-ext="c#"><pre class="language-c#"><code>public static void GetAllPlayerList(Action handler){
        handler();
}

public static void GetAllPlayerList(Action&lt;GoodsList&gt; handler){
     handler(list);
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="协程" tabindex="-1"><a class="header-anchor" href="#协程" aria-hidden="true">#</a> 协程🎈</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>协程</p></div><div class="language-c# line-numbers-mode" data-ext="c#"><pre class="language-c#"><code>IEnumerator Test(){ 
    //你的代码
    yield return null;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>延迟循环协程</p></div><div class="language-c# line-numbers-mode" data-ext="c#"><pre class="language-c#"><code>IEnumerator Text(){ 
    while (true){
        // 之前代码
        yield return new WaitForSeconds (5);
        // 之后代码
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>延迟协程</p></div><div class="language-c# line-numbers-mode" data-ext="c#"><pre class="language-c#"><code>IEnumerator Text(){ 
    yield return new WaitForSeconds (5);
    // 之后代码
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用</li></ul><div class="language-c# line-numbers-mode" data-ext="c#"><pre class="language-c#"><code>StartCoroutine(Text());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ads接入" tabindex="-1"><a class="header-anchor" href="#ads接入" aria-hidden="true">#</a> ads接入🎈</h3><ul><li>https://docs.unity.com/ads/UnityAdsHome.html</li></ul><h3 id="小程序" tabindex="-1"><a class="header-anchor" href="#小程序" aria-hidden="true">#</a> 小程序🏧</h3><ul><li>https://q.qq.com/</li><li>https://mp.weixin.qq.com/</li></ul><h3 id="json转换问题" tabindex="-1"><a class="header-anchor" href="#json转换问题" aria-hidden="true">#</a> json转换问题😄</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[Serializable]
public class R&lt;T&gt;{
    /** 类型由SocketEnum觉得 */
    public string type;
    /** 必须改成string才能json转换成功 */
    public T data;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>T必须是设定好类型，如果T是string那么无法接受对象类型字符串</p></div><h2 id="插件" tabindex="-1"><a class="header-anchor" href="#插件" aria-hidden="true">#</a> 插件🐔</h2><h3 id="advertisement" tabindex="-1"><a class="header-anchor" href="#advertisement" aria-hidden="true">#</a> Advertisement🍉</h3><ul><li>unity广告插件</li></ul><h3 id="dotween" tabindex="-1"><a class="header-anchor" href="#dotween" aria-hidden="true">#</a> DoTween🐷</h3>`,26),r={href:"https://assetstore.unity.com/packages/tools/animation/dotween-hotween-v2-27676",target:"_blank",rel:"noopener noreferrer"},d={href:"https://blog.csdn.net/qq_40323256/article/details/86834307",target:"_blank",rel:"noopener noreferrer"},m=n("h3",{id:"easysave",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#easysave","aria-hidden":"true"},"#"),s(" EasySave🗾")],-1),v=n("li",null,"数据保存",-1),b={href:"https://assetstore.unity.com/packages/tools/utilities/easy-save-the-complete-save-data-serialization-system-768",target:"_blank",rel:"noopener noreferrer"},y=n("h3",{id:"leantouch",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#leantouch","aria-hidden":"true"},"#"),s(" LeanTouch💔")],-1),h=n("li",null,"手势操作",-1),g={href:"https://assetstore.unity.com/packages/tools/input-management/lean-touch-30111",target:"_blank",rel:"noopener noreferrer"},w=n("h2",{id:"开源库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源库","aria-hidden":"true"},"#"),s(" 开源库🍏")],-1),f=n("h3",{id:"websocket",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#websocket","aria-hidden":"true"},"#"),s(" WebSocket🍎")],-1),_={href:"https://github.com/psygames/UnityWebSocket",target:"_blank",rel:"noopener noreferrer"},C=e('<h3 id="protobuf" tabindex="-1"><a class="header-anchor" href="#protobuf" aria-hidden="true">#</a> Protobuf😎</h3><ul><li>下载编译好的dll</li><li><a href="/lib/protobuf-3.21.5-net45.7z">protobuf-3.21.5-net45.7z</a></li><li>复制到 Assets/Plugins</li></ul><h3 id="kcp" tabindex="-1"><a class="header-anchor" href="#kcp" aria-hidden="true">#</a> KCP🍇</h3>',3),x={href:"https://cdn.githubjs.cf/KumoKyaku/KCP",target:"_blank",rel:"noopener noreferrer"},S=n("h3",{id:"luban",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#luban","aria-hidden":"true"},"#"),s(" LuBan👊")],-1),q={href:"https://focus-creative-games.github.io/luban/index/",target:"_blank",rel:"noopener noreferrer"},E=n("li",null,[n("p",null,[s("Java项目需要修改 "),n("strong",null,"root"),s(".xml")])],-1),M=n("li",null,[n("p",null,[n("img",{src:i,alt:""})])],-1),A=n("h2",{id:"微信游戏",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#微信游戏","aria-hidden":"true"},"#"),s(" 微信游戏🪲")],-1),G={href:"https://github.com/wechat-miniprogram/minigame-unity-webgl-transform",target:"_blank",rel:"noopener noreferrer"},I=e(`<h2 id="unityapi" tabindex="-1"><a class="header-anchor" href="#unityapi" aria-hidden="true">#</a> UnityApi🐯</h2><h3 id="移动相关" tabindex="-1"><a class="header-anchor" href="#移动相关" aria-hidden="true">#</a> 移动相关👊</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// 速度</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> speed <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

    <span class="token comment">// 一个基础的脚本移动</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> moveX<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> moveY<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> jump<span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        moveY <span class="token operator">=</span> Input<span class="token punctuation">.</span><span class="token function">GetAxisRaw</span><span class="token punctuation">(</span><span class="token string">&quot;Horizontal&quot;</span><span class="token punctuation">)</span> <span class="token operator">*</span> speed<span class="token punctuation">;</span>
        moveY <span class="token operator">=</span> Input<span class="token punctuation">.</span><span class="token function">GetAxisRaw</span><span class="token punctuation">(</span><span class="token string">&quot;Vertical&quot;</span><span class="token punctuation">)</span> <span class="token operator">*</span> speed<span class="token punctuation">;</span>
        jump <span class="token operator">=</span> Input<span class="token punctuation">.</span><span class="token function">GetAxisRaw</span><span class="token punctuation">(</span><span class="token string">&quot;Jump&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="邮件发送" tabindex="-1"><a class="header-anchor" href="#邮件发送" aria-hidden="true">#</a> 邮件发送💒</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SendMail</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> title<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> boyd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SmtpClient</span> mailClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SmtpClient</span><span class="token punctuation">(</span><span class="token string">&quot;smtp.qq.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mailClient<span class="token punctuation">.</span>EnableSsl <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">//Credentials登陆SMTP服务器的身份验证.</span>
    mailClient<span class="token punctuation">.</span>Credentials <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NetworkCredential</span><span class="token punctuation">(</span><span class="token string">&quot;你的邮箱&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;授权码&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//test@qq.com发件人地址、test@tom.com收件人地址</span>
    <span class="token class-name">MailMessage</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MailMessage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MailAddress</span><span class="token punctuation">(</span><span class="token string">&quot;发件人邮箱&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MailAddress</span><span class="token punctuation">(</span><span class="token string">&quot;收件人邮箱&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// message.Bcc.Add(new MailAddress(&quot;tst@qq.com&quot;)); //可以添加多个收件人</span>
    message<span class="token punctuation">.</span>Body <span class="token operator">=</span> boyd<span class="token punctuation">;</span><span class="token comment">//邮件内容</span>
    message<span class="token punctuation">.</span>Subject <span class="token operator">=</span> title<span class="token punctuation">;</span><span class="token comment">//邮件主题</span>
    mailClient<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="iogameunity" tabindex="-1"><a class="header-anchor" href="#iogameunity" aria-hidden="true">#</a> IoGameUnity✋</h3><ul><li>WebSocket</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Google<span class="token punctuation">.</span>Protobuf</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">UnityEngine<span class="token punctuation">.</span>SceneManagement</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">UnityWebSocket</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// socket可以和 ExternalMessage 类进行捆绑使用</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketClient</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">{</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;退出游戏面板&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token class-name">GameObject</span> quitGamePanel<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SocketClient</span> v<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">string</span></span> address <span class="token operator">=</span> <span class="token string">&quot;ws://192.168.1.3:10100/websocket&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">WebSocket</span> socket<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">Destroy</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        v <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">DontDestroyOnLoad</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//注册函数 </span>
        <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">TryConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//注册回调</span>
        UserAction<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ChatAction<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        GameAction<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        HeroAction<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token return-type class-name">IEnumerator</span> <span class="token function">TryConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//尝试重新链接</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WaitForSeconds</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>socket<span class="token punctuation">.</span>ReadyState <span class="token operator">!=</span> WebSocketState<span class="token punctuation">.</span>Open<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">QuitGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        socket<span class="token punctuation">.</span><span class="token function">CloseAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Application<span class="token punctuation">.</span><span class="token function">Quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetKeyDown</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>Escape<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            quitGamePanel<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            AnimationUtil<span class="token punctuation">.</span><span class="token function">DoScaleAnim</span><span class="token punctuation">(</span>quitGamePanel<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnError</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">ErrorEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//异常回调</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnMessage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">MessageEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//消息回调</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>IsBinary<span class="token punctuation">)</span><span class="token punctuation">{</span>
            HandleManager<span class="token punctuation">.</span><span class="token function">ParseMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>RawData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnClose</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">CloseEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//关闭回调</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnOpen</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">OpenEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//打开回调</span>
        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">&quot;链接服务器成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/** m里面做了null判断 */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Send</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> cmd<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> subCmd<span class="token punctuation">,</span> <span class="token class-name">IMessage</span> m <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//发送数据</span>
        socket<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>HandleManager<span class="token punctuation">.</span><span class="token function">BuildMessage</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> subCmd<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebSocket</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 注册回调</span>
        socket<span class="token punctuation">.</span>OnOpen <span class="token operator">+=</span> OnOpen<span class="token punctuation">;</span>
        socket<span class="token punctuation">.</span>OnClose <span class="token operator">+=</span> OnClose<span class="token punctuation">;</span>
        socket<span class="token punctuation">.</span>OnMessage <span class="token operator">+=</span> OnMessage<span class="token punctuation">;</span>
        socket<span class="token punctuation">.</span>OnError <span class="token operator">+=</span> OnError<span class="token punctuation">;</span>
        socket<span class="token punctuation">.</span><span class="token function">ConnectAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>HandleManager</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>CompilerServices</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Google<span class="token punctuation">.</span>Protobuf</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 一个通用项目对象，</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HandleManager</span><span class="token punctuation">{</span> <span class="token comment">//回调处理</span>
    <span class="token comment">//---------------------------发送处理</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span> <span class="token keyword">int</span> <span class="token punctuation">,</span>  EventHandler<span class="token punctuation">&lt;</span>Execute<span class="token punctuation">&gt;</span> <span class="token punctuation">&gt;</span></span> handlers <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">Execute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EventArgs</span></span><span class="token punctuation">{</span>    <span class="token comment">// 事件参数</span>
        <span class="token comment">/** 状态码 */</span>
        <span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> responseStatus<span class="token punctuation">;</span>
        <span class="token comment">/** 返回数据 */</span>
        <span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token class-name">ByteString</span> data<span class="token punctuation">;</span>
        <span class="token keyword">internal</span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">ByteString</span> data<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> responseStatus<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>responseStatus <span class="token operator">=</span> responseStatus<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddHandler</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> cmd<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> subCmd<span class="token punctuation">,</span>  <span class="token class-name">EventHandler<span class="token punctuation">&lt;</span>Execute<span class="token punctuation">&gt;</span></span> IHandler<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 注册回调</span>
        handlers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">GetMergeCmd</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span>subCmd<span class="token punctuation">)</span><span class="token punctuation">,</span>IHandler<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PackageHandler</span><span class="token punctuation">(</span> <span class="token class-name"><span class="token keyword">int</span></span> mergeCmd<span class="token punctuation">,</span> <span class="token class-name">ExternalMessage</span> data <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//分发消息</span>
        <span class="token keyword">try</span><span class="token punctuation">{</span>
            <span class="token class-name">EventHandler<span class="token punctuation">&lt;</span>Execute<span class="token punctuation">&gt;</span></span> handler <span class="token operator">=</span> handlers<span class="token punctuation">[</span>mergeCmd<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//对于路由不存在的错误处理</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> handler<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Execute</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>DataContent<span class="token punctuation">,</span>data<span class="token punctuation">.</span>ResponseStatus<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">&quot;不存在的路由: &quot;</span><span class="token operator">+</span><span class="token function">GetCmd</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>CmdMerge<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;-&quot;</span><span class="token operator">+</span><span class="token function">GetSubCmd</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>CmdMerge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ParseMessage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//解析消息</span>
        <span class="token class-name">ExternalMessage</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExternalMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        message<span class="token punctuation">.</span><span class="token function">MergeFrom</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//Debug.Log(message);</span>
        <span class="token function">PackageHandler</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>CmdMerge<span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//---------------------------路由命令处理</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetCmd</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> merge<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//获取cmd</span>
        <span class="token keyword">return</span> merge <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetSubCmd</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> merge<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//获取subCmd</span>
        <span class="token keyword">return</span> merge <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetMergeCmd</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> cmd<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> subCmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//获取mergeCmd</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>cmd <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> subCmd<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//---------------------------封装发送结果处理</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">BuildMessage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> cmd<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> subCmd<span class="token punctuation">,</span><span class="token class-name">IMessage</span> v <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 封装消息发送</span>
        <span class="token class-name">ByteString</span> data <span class="token operator">=</span> ByteString<span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            data <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">ToByteString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name"><span class="token keyword">var</span></span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExternalMessage</span><span class="token punctuation">{</span>
            CmdMerge <span class="token operator">=</span> <span class="token function">GetMergeCmd</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> subCmd<span class="token punctuation">)</span><span class="token punctuation">,</span>
            DataContent <span class="token operator">=</span> data<span class="token punctuation">,</span>
            ProtocolSwitch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
            CmdCode <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> message<span class="token punctuation">.</span><span class="token function">ToByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function O(P,B){const a=l("ExternalLinkIcon");return c(),o("div",null,[k,n("ul",null,[n("li",null,[n("a",r,[s("https://assetstore.unity.com/packages/tools/animation/dotween-hotween-v2-27676"),t(a)])]),n("li",null,[n("a",d,[s("DoTween动画"),t(a)])])]),m,n("ul",null,[v,n("li",null,[n("a",b,[s("https://assetstore.unity.com/packages/tools/utilities/easy-save-the-complete-save-data-serialization-system-768"),t(a)])])]),y,n("ul",null,[h,n("li",null,[n("a",g,[s("https://assetstore.unity.com/packages/tools/input-management/lean-touch-30111"),t(a)])])]),w,f,n("ul",null,[n("li",null,[n("a",_,[s("https://github.com/psygames/UnityWebSocket"),t(a)])])]),C,n("ul",null,[n("li",null,[n("a",x,[s("https://cdn.githubjs.cf/KumoKyaku/KCP"),t(a)])])]),S,n("ul",null,[n("li",null,[n("p",null,[n("a",q,[s("https://focus-creative-games.github.io/luban/index/"),t(a)])])]),E,M]),A,n("ul",null,[n("li",null,[n("a",G,[s("https://github.com/wechat-miniprogram/minigame-unity-webgl-transform"),t(a)])])]),I])}const j=p(u,[["render",O],["__file","unity.html.vue"]]);export{j as default};
