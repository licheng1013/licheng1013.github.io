const n=JSON.parse('{"key":"v-1296d022","path":"/study/go/design-mode.html","title":"设计模式","lang":"zh-CN","frontmatter":{"description":"设计模式 Go语言实现 代理模式 描述 实现了基本代理模式，和嵌套代理模式 import ( \\t\\"log\\" \\t\\"testing\\" ) func TestProxy(t *testing.T) { \\tp1 := &amp;Proxy{} \\tp1.proxy = &amp;Test{} \\tfor i := 0; i &lt; 2; i++ { \\t\\tp2 := &amp;Proxy{} //新的 \\t\\tp2.proxy = p1 //新的代理挂在旧的代理 \\t\\tp1 = p2 //新的替换原有的 \\t} \\tp1.Invoke() } type A interface { \\tInvoke() } type Proxy struct { \\tproxy A } func (p *Proxy) Invoke() { \\tlog.Println(\\"代理之前\\") \\tp.proxy.Invoke() \\tlog.Println(\\"代理之后\\") } type Test struct { } func (t *Test) Invoke() { \\tlog.Println(\\"业务逻辑\\") }","head":[["meta",{"property":"og:url","content":"https://licheng1013.github.io/study/go/design-mode.html"}],["meta",{"property":"og:site_name","content":"LiCheng Blog"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"设计模式 Go语言实现 代理模式 描述 实现了基本代理模式，和嵌套代理模式 import ( \\t\\"log\\" \\t\\"testing\\" ) func TestProxy(t *testing.T) { \\tp1 := &amp;Proxy{} \\tp1.proxy = &amp;Test{} \\tfor i := 0; i &lt; 2; i++ { \\t\\tp2 := &amp;Proxy{} //新的 \\t\\tp2.proxy = p1 //新的代理挂在旧的代理 \\t\\tp1 = p2 //新的替换原有的 \\t} \\tp1.Invoke() } type A interface { \\tInvoke() } type Proxy struct { \\tproxy A } func (p *Proxy) Invoke() { \\tlog.Println(\\"代理之前\\") \\tp.proxy.Invoke() \\tlog.Println(\\"代理之后\\") } type Test struct { } func (t *Test) Invoke() { \\tlog.Println(\\"业务逻辑\\") }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-15T03:48:30.000Z"}],["meta",{"property":"article:author","content":"LiCheng"}],["meta",{"property":"article:modified_time","content":"2023-02-15T03:48:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-15T03:48:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LiCheng\\",\\"url\\":\\"https://gitee.com/licheng1013\\"}]}"]]},"headers":[{"level":2,"title":"Go语言实现","slug":"go语言实现","link":"#go语言实现","children":[{"level":3,"title":"代理模式","slug":"代理模式","link":"#代理模式","children":[]}]}],"git":{"createdTime":1676432910000,"updatedTime":1676432910000,"contributors":[{"name":"licheng1013","email":"2501093733@qq.com","commits":1}]},"readingTime":{"minutes":0.38,"words":115},"filePathRelative":"study/go/design-mode.md","localizedDate":"2023年2月15日","excerpt":"<h1> 设计模式</h1>\\n<h2> Go语言实现</h2>\\n<h3> 代理模式</h3>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">描述</p>\\n<ul>\\n<li>实现了基本代理模式，和嵌套代理模式</li>\\n</ul>\\n</div>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">(</span>\\n\\t<span class=\\"token string\\">\\"log\\"</span>\\n\\t<span class=\\"token string\\">\\"testing\\"</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">TestProxy</span><span class=\\"token punctuation\\">(</span>t <span class=\\"token operator\\">*</span>testing<span class=\\"token punctuation\\">.</span>T<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\tp1 <span class=\\"token operator\\">:=</span> <span class=\\"token operator\\">&amp;</span>Proxy<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\tp1<span class=\\"token punctuation\\">.</span>proxy <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">&amp;</span>Test<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">for</span> i <span class=\\"token operator\\">:=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tp2 <span class=\\"token operator\\">:=</span> <span class=\\"token operator\\">&amp;</span>Proxy<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span> <span class=\\"token comment\\">//新的</span>\\n\\t\\tp2<span class=\\"token punctuation\\">.</span>proxy <span class=\\"token operator\\">=</span> p1  <span class=\\"token comment\\">//新的代理挂在旧的代理</span>\\n\\t\\tp1 <span class=\\"token operator\\">=</span> p2        <span class=\\"token comment\\">//新的替换原有的</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\tp1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Invoke</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">type</span> A <span class=\\"token keyword\\">interface</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token function\\">Invoke</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">type</span> Proxy <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n\\tproxy A\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">*</span>Proxy<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">Invoke</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"代理之前\\"</span><span class=\\"token punctuation\\">)</span>\\n\\tp<span class=\\"token punctuation\\">.</span>proxy<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Invoke</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"代理之后\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">type</span> Test <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token punctuation\\">(</span>t <span class=\\"token operator\\">*</span>Test<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">Invoke</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"业务逻辑\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
