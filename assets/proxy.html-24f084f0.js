const n=JSON.parse('{"key":"v-1a97af14","path":"/study/java/design-mode/proxy.html","title":"代理模式","lang":"zh-CN","frontmatter":{"description":"代理模式 增加对象的行为 jdk代理，cglib代理 jdk代理 只代理接口,代理实现继承了 Proxy 类，所以就不能使用子类去创建代理了 import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; /** * @author lc * @since 2022/6/8 */ public class ProxyTest { public static void main(String[] args) throws Exception { Mapper m = id -&gt; { //实现类 System.out.println(\\"HelloWorld\\"); return null; }; Mapper mapper = (Mapper) Proxy.newProxyInstance(Mapper.class.getClassLoader(), new Class[]{Mapper.class} , new ProxyMapper(m)); System.out.println(mapper.selectOne(\\"1\\")); } } interface Mapper{ String selectOne(String id); } class ProxyMapper implements InvocationHandler{ public Object pro; public ProxyMapper(Object pro) { this.pro = pro; } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { System.out.println(\\"拦截执行！\\"); System.out.println(\\"获取方法名：\\"+method.getName()); return method.invoke(pro, args); } }","head":[["meta",{"property":"og:url","content":"https://licheng1013.github.io/study/java/design-mode/proxy.html"}],["meta",{"property":"og:site_name","content":"LiCheng Blog"}],["meta",{"property":"og:title","content":"代理模式"}],["meta",{"property":"og:description","content":"代理模式 增加对象的行为 jdk代理，cglib代理 jdk代理 只代理接口,代理实现继承了 Proxy 类，所以就不能使用子类去创建代理了 import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; /** * @author lc * @since 2022/6/8 */ public class ProxyTest { public static void main(String[] args) throws Exception { Mapper m = id -&gt; { //实现类 System.out.println(\\"HelloWorld\\"); return null; }; Mapper mapper = (Mapper) Proxy.newProxyInstance(Mapper.class.getClassLoader(), new Class[]{Mapper.class} , new ProxyMapper(m)); System.out.println(mapper.selectOne(\\"1\\")); } } interface Mapper{ String selectOne(String id); } class ProxyMapper implements InvocationHandler{ public Object pro; public ProxyMapper(Object pro) { this.pro = pro; } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { System.out.println(\\"拦截执行！\\"); System.out.println(\\"获取方法名：\\"+method.getName()); return method.invoke(pro, args); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-09T10:55:53.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-09T10:55:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代理模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-12-09T10:55:53.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"jdk代理","slug":"jdk代理","link":"#jdk代理","children":[]},{"level":2,"title":"cglib代理","slug":"cglib代理","link":"#cglib代理","children":[]}],"git":{"createdTime":1670583353000,"updatedTime":1670583353000,"contributors":[{"name":"licheng1013","email":"2501093733@qq.com","commits":1}]},"readingTime":{"minutes":0.5,"words":150},"filePathRelative":"study/java/design-mode/proxy.md","localizedDate":"2022年12月9日","excerpt":"<h1> 代理模式</h1>\\n<ul>\\n<li>增加对象的行为</li>\\n<li>jdk代理，cglib代理</li>\\n</ul>\\n<h2> jdk代理</h2>\\n<ul>\\n<li>只代理接口,代理实现继承了 Proxy 类，所以就不能使用子类去创建代理了</li>\\n</ul>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>lang<span class=\\"token punctuation\\">.</span>reflect<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">InvocationHandler</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>lang<span class=\\"token punctuation\\">.</span>reflect<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Method</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>lang<span class=\\"token punctuation\\">.</span>reflect<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Proxy</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token doc-comment comment\\">/**\\n * <span class=\\"token keyword\\">@author</span> lc\\n * <span class=\\"token keyword\\">@since</span> 2022/6/8\\n */</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ProxyTest</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Mapper</span> m <span class=\\"token operator\\">=</span> id <span class=\\"token operator\\">-&gt;</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">//实现类</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"HelloWorld\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">Mapper</span> mapper <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Mapper</span><span class=\\"token punctuation\\">)</span> <span class=\\"token class-name\\">Proxy</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">newProxyInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Mapper</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getClassLoader</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Class</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">{</span><span class=\\"token class-name\\">Mapper</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">}</span>\\n                <span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ProxyMapper</span><span class=\\"token punctuation\\">(</span>m<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>mapper<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">selectOne</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"1\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">Mapper</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">selectOne</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> id<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ProxyMapper</span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">InvocationHandler</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Object</span> pro<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">ProxyMapper</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Object</span> pro<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>pro <span class=\\"token operator\\">=</span> pro<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token annotation punctuation\\">@Override</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Object</span> <span class=\\"token function\\">invoke</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Object</span> proxy<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Method</span> method<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Throwable</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"拦截执行！\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"获取方法名：\\"</span><span class=\\"token operator\\">+</span>method<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> method<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">invoke</span><span class=\\"token punctuation\\">(</span>pro<span class=\\"token punctuation\\">,</span> args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
