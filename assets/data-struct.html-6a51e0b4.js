const e=JSON.parse('{"key":"v-f4a23b22","path":"/study/java/data-struct.html","title":"数据结构","lang":"zh-CN","frontmatter":{"description":"数据结构 介绍💒 待写 HashMap✋ 数据结构: Array LinkedList Tree 实现 默认构造方法不会创建内部的数组对象 put方法调用过程,判断内部是否创建了数组对象，没有创建则创建。 计算key的hashCode如果在数组中不存在则存入进去 判断两个对象hash值和对象地址对比是否一样 不一样继续判断 equals 对比也不一样 (hash值一样，地址不一样,equals也不一样则往下走) 判断有没有变成树 变成链表放入其中：如果，链表大于8并且HashMap的数组大于64则转换成树 size++ 执行完毕 默认长度为: 16 负载因子: 0.75 putVal方法 省略其他方法","head":[["meta",{"property":"og:url","content":"https://licheng1013.github.io/study/java/data-struct.html"}],["meta",{"property":"og:site_name","content":"LiCheng Blog"}],["meta",{"property":"og:title","content":"数据结构"}],["meta",{"property":"og:description","content":"数据结构 介绍💒 待写 HashMap✋ 数据结构: Array LinkedList Tree 实现 默认构造方法不会创建内部的数组对象 put方法调用过程,判断内部是否创建了数组对象，没有创建则创建。 计算key的hashCode如果在数组中不存在则存入进去 判断两个对象hash值和对象地址对比是否一样 不一样继续判断 equals 对比也不一样 (hash值一样，地址不一样,equals也不一样则往下走) 判断有没有变成树 变成链表放入其中：如果，链表大于8并且HashMap的数组大于64则转换成树 size++ 执行完毕 默认长度为: 16 负载因子: 0.75 putVal方法 省略其他方法"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-09T10:55:53.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-09T10:55:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-12-09T10:55:53.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"介绍💒","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"HashMap✋","slug":"hashmap","link":"#hashmap","children":[]},{"level":2,"title":"LinkedList🍅","slug":"linkedlist","link":"#linkedlist","children":[]},{"level":2,"title":"Array🐯","slug":"array","link":"#array","children":[]},{"level":2,"title":"Stack👏","slug":"stack","link":"#stack","children":[]},{"level":2,"title":"Queue👏","slug":"queue","link":"#queue","children":[]}],"git":{"createdTime":1670583353000,"updatedTime":1670583353000,"contributors":[{"name":"licheng1013","email":"2501093733@qq.com","commits":1}]},"readingTime":{"minutes":1.96,"words":588},"filePathRelative":"study/java/data-struct.md","localizedDate":"2022年12月9日","excerpt":"<h1> 数据结构</h1>\\n<h2> 介绍💒</h2>\\n<ul>\\n<li>待写</li>\\n</ul>\\n<h2> HashMap✋</h2>\\n<ul>\\n<li>\\n<p>数据结构: Array LinkedList Tree</p>\\n</li>\\n<li>\\n<p>实现</p>\\n<ul>\\n<li>默认构造方法不会创建内部的数组对象</li>\\n<li>put方法调用过程,判断内部是否创建了数组对象，没有创建则创建。\\n<ul>\\n<li>计算key的hashCode如果在数组中不存在则存入进去\\n<ul>\\n<li>判断两个对象hash值和对象地址对比是否一样 不一样继续判断 equals 对比也不一样 (hash值一样，地址不一样,equals也不一样则往下走)</li>\\n<li>判断有没有变成树</li>\\n<li>变成链表放入其中：如果，链表大于8并且HashMap的数组大于64则转换成树</li>\\n</ul>\\n</li>\\n<li>size++</li>\\n<li>执行完毕</li>\\n</ul>\\n</li>\\n<li>默认长度为: 16 负载因子: 0.75</li>\\n</ul>\\n</li>\\n<li>\\n<p>putVal方法</p>\\n</li>\\n<li>\\n<p>省略其他方法</p>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
